var _user$project$Tests7$all = A2(
	_elm_community$elm_test$Test$describe,
	'Problem 7 tests',
	{
		ctor: '::',
		_0: A2(
			_elm_community$elm_test$Test$test,
			'flatten (SubList [ Elem 1, Elem 2 ]) == [ 1, 2 ]',
			function (_p0) {
				var _p1 = _p0;
				var expected = {
					ctor: '::',
					_0: 1,
					_1: {
						ctor: '::',
						_0: 2,
						_1: {ctor: '[]'}
					}
				};
				var actual = _user$project$FlattenNestedList$flatten(
					_user$project$FlattenNestedList$SubList(
						{
							ctor: '::',
							_0: _user$project$FlattenNestedList$Elem(1),
							_1: {
								ctor: '::',
								_0: _user$project$FlattenNestedList$Elem(2),
								_1: {ctor: '[]'}
							}
						}));
				return A2(_elm_community$elm_test$Expect$equal, actual, expected);
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_community$elm_test$Test$test,
				'flatten (SubList [ Elem 1, Elem 2 ]) == [ 1, 2 ]',
				function (_p2) {
					var _p3 = _p2;
					var expected = {
						ctor: '::',
						_0: 1,
						_1: {
							ctor: '::',
							_0: 2,
							_1: {ctor: '[]'}
						}
					};
					var actual = _user$project$FlattenNestedList$flatten(
						_user$project$FlattenNestedList$SubList(
							{
								ctor: '::',
								_0: _user$project$FlattenNestedList$Elem(1),
								_1: {
									ctor: '::',
									_0: _user$project$FlattenNestedList$Elem(2),
									_1: {ctor: '[]'}
								}
							}));
					return A2(_elm_community$elm_test$Expect$equal, actual, expected);
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_community$elm_test$Test$test,
					'flatten (SubList [ Elem \'a\', Elem \'b\' ]) == [ \'a\', \'b\' ]',
					function (_p4) {
						var _p5 = _p4;
						var expected = {
							ctor: '::',
							_0: 'a',
							_1: {
								ctor: '::',
								_0: 'b',
								_1: {ctor: '[]'}
							}
						};
						var actual = _user$project$FlattenNestedList$flatten(
							_user$project$FlattenNestedList$SubList(
								{
									ctor: '::',
									_0: _user$project$FlattenNestedList$Elem('a'),
									_1: {
										ctor: '::',
										_0: _user$project$FlattenNestedList$Elem('b'),
										_1: {ctor: '[]'}
									}
								}));
						return A2(_elm_community$elm_test$Expect$equal, actual, expected);
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_community$elm_test$Test$test,
						'flatten (SubList [ ]) == [ ]',
						function (_p6) {
							var _p7 = _p6;
							var expected = {ctor: '[]'};
							var actual = _user$project$FlattenNestedList$flatten(
								_user$project$FlattenNestedList$SubList(
									{ctor: '[]'}));
							return A2(_elm_community$elm_test$Expect$equal, actual, expected);
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_community$elm_test$Test$test,
							'flatten (SubList [ ]) == [ ]',
							function (_p8) {
								var _p9 = _p8;
								var expected = A2(_elm_lang$core$List$range, 1, 9);
								var numbers_1_9 = _user$project$FlattenNestedList$SubList(
									{
										ctor: '::',
										_0: _user$project$FlattenNestedList$Elem(1),
										_1: {
											ctor: '::',
											_0: _user$project$FlattenNestedList$SubList(
												{
													ctor: '::',
													_0: _user$project$FlattenNestedList$SubList(
														{
															ctor: '::',
															_0: _user$project$FlattenNestedList$Elem(2),
															_1: {
																ctor: '::',
																_0: _user$project$FlattenNestedList$SubList(
																	{
																		ctor: '::',
																		_0: _user$project$FlattenNestedList$Elem(3),
																		_1: {
																			ctor: '::',
																			_0: _user$project$FlattenNestedList$Elem(4),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: _user$project$FlattenNestedList$Elem(5),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _user$project$FlattenNestedList$Elem(6),
												_1: {
													ctor: '::',
													_0: _user$project$FlattenNestedList$SubList(
														{
															ctor: '::',
															_0: _user$project$FlattenNestedList$Elem(7),
															_1: {
																ctor: '::',
																_0: _user$project$FlattenNestedList$Elem(8),
																_1: {
																	ctor: '::',
																	_0: _user$project$FlattenNestedList$Elem(9),
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									});
								var actual = _user$project$FlattenNestedList$flatten(numbers_1_9);
								return A2(_elm_community$elm_test$Expect$equal, actual, expected);
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$Tests7$nl1 = _user$project$FlattenNestedList$SubList(
	{
		ctor: '::',
		_0: _user$project$FlattenNestedList$Elem(1),
		_1: {
			ctor: '::',
			_0: _user$project$FlattenNestedList$SubList(
				{
					ctor: '::',
					_0: _user$project$FlattenNestedList$SubList(
						{
							ctor: '::',
							_0: _user$project$FlattenNestedList$Elem(2),
							_1: {
								ctor: '::',
								_0: _user$project$FlattenNestedList$SubList(
									{
										ctor: '::',
										_0: _user$project$FlattenNestedList$Elem(3),
										_1: {
											ctor: '::',
											_0: _user$project$FlattenNestedList$Elem(4),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _user$project$FlattenNestedList$Elem(5),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: _user$project$FlattenNestedList$Elem(6),
				_1: {
					ctor: '::',
					_0: _user$project$FlattenNestedList$SubList(
						{
							ctor: '::',
							_0: _user$project$FlattenNestedList$Elem(7),
							_1: {
								ctor: '::',
								_0: _user$project$FlattenNestedList$Elem(8),
								_1: {
									ctor: '::',
									_0: _user$project$FlattenNestedList$Elem(9),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Tests7$nl0 = _user$project$FlattenNestedList$SubList(
	{
		ctor: '::',
		_0: _user$project$FlattenNestedList$Elem(1),
		_1: {
			ctor: '::',
			_0: _user$project$FlattenNestedList$Elem(2),
			_1: {ctor: '[]'}
		}
	});
